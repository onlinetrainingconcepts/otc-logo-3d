/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.1 logo.gltf --types --transform --shadows --output
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'
import { degToRad } from 'three/src/math/MathUtils'
import { useFrame } from '@react-three/fiber'

type GLTFResult = GLTF & {
	nodes: {
		Part1: THREE.Mesh
		Part2: THREE.Mesh
		Part3: THREE.Mesh
		Part4: THREE.Mesh
		Part5: THREE.Mesh
	}
	materials: {
		LightYellow: THREE.MeshStandardMaterial
		DarkYellow: THREE.MeshStandardMaterial
		LightGreen: THREE.MeshStandardMaterial
		MediumGreen: THREE.MeshStandardMaterial
		DarkGreen: THREE.MeshStandardMaterial
	}
}

export default function Model(props: JSX.IntrinsicElements['group']) {
	const { nodes, materials } = useGLTF('./assets/models/logo.glb') as unknown as GLTFResult
	const [logoRotation, setLogoRotation] = useState<number>(0)
	const LogoRef = useRef<THREE.Group | null>(null)

	useFrame(({ clock }) => {
		const tick = clock.getElapsedTime()
		setLogoRotation(tick * 20)
		console.log(tick)
	})

	return (
		<group {...props} ref={LogoRef} dispose={null} position={[0, 1.25, -1]} rotation={[0, THREE.MathUtils.degToRad(logoRotation), 0]}>
			<mesh castShadow receiveShadow geometry={nodes.Part1.geometry} material={materials.LightYellow} />
			<mesh castShadow receiveShadow geometry={nodes.Part2.geometry} material={materials.DarkYellow} />
			<mesh castShadow receiveShadow geometry={nodes.Part3.geometry} material={materials.LightGreen} />
			<mesh castShadow receiveShadow geometry={nodes.Part4.geometry} material={materials.MediumGreen} />
			<mesh castShadow receiveShadow geometry={nodes.Part5.geometry} material={materials.DarkGreen} />
		</group>
	)
}

useGLTF.preload('./assets/models/logo.glb')
